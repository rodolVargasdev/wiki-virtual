name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: wiki-virtual-python-20f8f
  SERVICE_NAME: wiki-virtual-api
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test imports
      run: |
        echo "üîÑ Probando importaciones..."
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            import main
            print('‚úÖ main.py importado correctamente')
            print('‚úÖ FastAPI app creada:', main.app.title)
        except Exception as e:
            print('‚ùå Error importando main.py:', e)
            sys.exit(1)
        "

    - name: Test Docker build
      run: |
        echo "üîÑ Probando build de Docker..."
        docker build -t test-wiki-virtual .
        echo "‚úÖ Docker build exitoso"

    - name: Test Docker run
      run: |
        echo "üîÑ Probando ejecuci√≥n de Docker..."
        docker run -d -p 8080:8080 --name test-container test-wiki-virtual
        sleep 10
        if curl -f http://localhost:8080/health; then
          echo "‚úÖ Aplicaci√≥n responde correctamente"
        else
          echo "‚ùå Aplicaci√≥n no responde"
          docker logs test-container
          exit 1
        fi
        docker stop test-container
        docker rm test-container

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --timeout 600 \
          --set-env-vars="ENVIRONMENT=production"

    - name: Verify deployment
      run: |
        sleep 30
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
        echo "üîÑ Verificando despliegue en: $SERVICE_URL"
        if curl -f "$SERVICE_URL/health"; then
          echo "‚úÖ Despliegue exitoso y funcionando"
        else
          echo "‚ùå Despliegue fall√≥ - servicio no responde"
          exit 1
        fi

    - name: Show service URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')
        echo "üöÄ Servicio desplegado en: $SERVICE_URL"
        echo "üìö Documentaci√≥n: $SERVICE_URL/docs"
        echo "üîç Health check: $SERVICE_URL/health"