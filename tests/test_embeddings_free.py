from sentence_transformers import SentenceTransformer
import numpy as np

def test_free_embeddings():
    """Probar embeddings gratuitos con sentence-transformers"""
    
    print("ðŸ”„ Cargando modelo de embeddings...")
    
    # Cargar modelo (se descarga la primera vez)
    model = SentenceTransformer('all-MiniLM-L6-v2')
    
    print("âœ… Modelo cargado correctamente")
    
    # Textos de prueba
    texts = [
        "Las redes de computadoras son sistemas de comunicaciÃ³n",
        "Los gatos son animales domÃ©sticos",
        "La programaciÃ³n es el arte de resolver problemas",
        "Las redes informÃ¡ticas permiten compartir datos"
    ]
    
    print("\nðŸ§ª Creando embeddings...")
    
    # Crear embeddings
    embeddings = model.encode(texts)
    
    print(f"âœ… Embeddings creados: {embeddings.shape}")
    print(f"   - NÃºmero de textos: {embeddings.shape[0]}")
    print(f"   - DimensiÃ³n de cada embedding: {embeddings.shape[1]}")
    
    # Calcular similitud entre textos
    print("\nï¿½ï¿½ Calculando similitudes...")
    
    # Texto de consulta
    query = "Â¿QuÃ© son las redes de computadoras?"
    query_embedding = model.encode([query])
    
    # Calcular similitudes
    similarities = np.dot(embeddings, query_embedding.T).flatten()
    
    print(f"Consulta: '{query}'")
    print("\nSimilitudes con cada texto:")
    
    for i, (text, similarity) in enumerate(zip(texts, similarities)):
        print(f"  {i+1}. Similitud: {similarity:.3f} - '{text[:50]}...'")
    
    # Encontrar el texto mÃ¡s similar
    most_similar_idx = np.argmax(similarities)
    print(f"\nâœ… Texto mÃ¡s similar: '{texts[most_similar_idx]}'")
    print(f"   Similitud: {similarities[most_similar_idx]:.3f}")

if __name__ == "__main__":
    test_free_embeddings()